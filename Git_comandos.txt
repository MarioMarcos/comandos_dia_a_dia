************** GITHUB******************
github.com este aqui é o pessoal
user:email ou MarioMarcos
senha: gmail antigo mais caractere

Em uso
git push está funcionando 
git push origin master --para enviar para o servidor remoto -- MAIS USADO
Git push --set-upstream origin master
************** GITHUB******************
-------------------------------------------------------
Dica: 27/01/2020: 
CD/CI
https://docs.gitlab.com/ee/ci/yaml/

EXEMPLOS:
https://docs.gitlab.com/ee/ci/examples/README.html

-------------------------------------------------------

Dica 22/01/2020: Estamos preparando um passo a passo para trabalhar com FORK para o repositório, aonde vamos usar no projeto da documentação do Estaleiro docs. ========seguiremos amanhã 23/01/2020.

Dica 22/01/2020: Para atualizar vários repositórios é necessário fazer o procedimento de add, commit e push individualmente. Isto foi testado com Aurélio/Mário e pode ter uma opção mais prática, mas vamos ver posteriormente.

Para baixar o arquivo do GITHUB por linha de comando quando apagar algum arquivo sem querer e não precisar baixar o repositório basta somente usar o wget como no exemplo: 
wget https://github.com/MarioMarcos/comandos_dia_a_dia/blob/master/VScode_comandos.txt ou
wget https://github.com/MarioMarcos/comandos_dia_a_dia/blob/master/VScode_comandos.txt --no-check-certificate

ai ele vai baixar o arquivo que vocẽ escolheu, Contudo no GIT LAB existe um botão para baixar o download se precisar.

=============
Centrazized workflow
git pull origin master --rebase ==para trazer atualizações que estão no remote e colocar as minhas mudanças no topo de tudo =====testar ainda
=============
Feature Branch == é o que a maioria trabalha e vou ver se trabalho com ele também.

- Um branch para cada feature
- Evita conflitos e consegue trabalhos em Paralelo.
- Funcina bem com equipes maiores

No feature branch - não se utiliza o master e sim branchs para o trabalho, o master é considerado ambiente de produção.

EXEMPLO ITEM 41 DO CURSO MARIO MARCOS UDEMY DE GIT E GIT HUB NA VIDA REAL

===============

Laurezone ver restante do vídeo git NO YOUTUBE MUITO BOM

--------------------
Cat .gitconf   ==ARQUIVO PARA VER DEPOIS
---

Create merge requests é para mandar alterações para uma outra branch para. A Master.
Pode ter dialogo entre os desenvolveres.

---
Git merge branch 
--
Git diff arq1 arq2

--
Git blame nomearq -- ver detalhes das versões
Git config --list
Git config --global alias.com commit
Git config --global alias.co checkout
Git help commit
Git help status
Git rm nomearq para apagar
Git diff nomearq


--------------------------------------------------
EXEMPLOS DE GITIGNORE
Ignorar arquivos:
. ocultos

Ignorar arq de um diretório:
Log /*

Ignorar arquivos e diretórios dentro de um diretório:
Temp/**/*


Site interessante:
Gitignore.io  **interessante para criar automaticamente .gitignore

=================================================================================================================

ver este link depois - muito bom para uma criação e forma de trabalhar no GIT
https://blog.da2k.com.br/2015/02/04/git-e-github-do-clone-ao-pull-request/

1----%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
==========================================================================
BAIXAR O GIT DO SITE NA INTERNET - Para Terminal Linux
==========================================================================
depois de instalado:

git init   // inicia a linha do tempo --inicia tudo do git no terminal

>>
--se houver problemas com certificados dentro do SERPRO utilize este comando 
git config --global http.sslverify "false"

>>

git config --global user.name "Mário Marcos"     --seta o seu nome para o GIT
git config --global user.email "mario.souza@serpro.gov.br"  --seta o seu email para o GIT

>>
git add // adiciona ou atualiza mudanças para irem para a linha do tempo
git commit // adiciona um ponto na linha do tempo
git log // visualiza os pontos na linha do tempo / commit
git status // informa o estado das alterações do nosso projeto
git show // apresenta determinado ponto na história
git branch // gerenciar novas linhas do tempo
git checkout // manipula as linhas do tempo
git merge // unir linhas do tempo
git push  // envia alterações locais para o repositório remoto
git clone // clonar um projeto / repositório
git pull // puxa do repositório remoto 
git blame nomearq
git add -i --ver opções
git config --list  -- para ver quem é o dono do repositório e em que branch está

--FAZER DE NOVO COM NOVO REPOSITÓRIO 
--esse aqui foi que deu mais certo
FAZ ISSO AQUI A PRIMEIRA VEZ --lembre-se de criar um projeto inicial dentro do git web aí depois faça isso aqui

Push an existing Git repository
cd my_scripts_de_trabalho

git remote rename origin docs_new --mudei para branch docs_new
git remote add origin https://git.serpro/76455424115/my_scripts_de_trabalho.git
git push -u origin --all
git push -u origin --tags

>> Depois faz somente git add . >> git commit -m "nomedaversao" >> e git push

POR REINALDO

vá na pasta do DOCS >> code . >> abrar o terminal no code e digite hugo server para que o vscode fique sincronizado para todas as alterações que você fizer reflitam no site do docs do seu reposítório. >> posteriormente terá que ser feito um merge para o branch do docs_new do site principal do estaleiro.

XXXXX esse aqui passou a ser o meu dia a dia
git status
git add .
git commit -m "push

#apagar arquivo dentro da pasta do git somente com usando git no inicio como o exemplo: git rm file.txt, pois assim ele já joga para a área de stage e ai abre a possiblidade de recuperação do arquivo. 

--%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
2- ---------TESTES ESSES AQUI ABAIXO-------------------------------------

git reset HEAD nome-do-arquivo  
git commit -a -m "Mensagem do commit"
-- cat .gitconf --testar depois
git pull origin dev_news
-- create merge requets é para mandar alterações para uma outra branch para a master.
Pode ter dialogo entre os desenvolvedores 
-- 

--
git merge branch

================================================
criei um repositório na web e baixei para o meu git terminal

TESTAR ESSE AQUI MELHOR

Git global setup
git config --global user.name "Mario Marcos Martins de Souza"
git config --global user.email "mario.souza@serpro.gov.br"

Create a new repository
git clone https://git.serpro/76455424115/my_scripts_de_trabalho.git
cd my_scripts_de_trabalho
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master

Push an existing folder
cd existing_folder
git init
git remote add origin https://git.serpro/76455424115/my_scripts_de_trabalho.git
git add .
git commit -m "Initial commit"
git push -u origin master

3- ===============MAIS GIT PARA ESTUDAR E TESTAR DEPOIS ALÉM DA PARTE AQUI DE CIMA==========================
----------------------
COMANDOS PARA GIT RESET
-----------------------
Voltar um commit:

git reset HEAD~1
Voltar dois commits:

git reset HEAD~2
Voltando um commit e deixando o arquivo no estagio anterior:

git reset HEAD~1 --soft
Voltando um commit e excluindo o arquivo, deixando no estágio anterior:

git reset HEAD~1 --hard
Verificando o histórico de commits:

----------------------
COMANDOS PARA GIT LOG
-----------------------
Mostrando o início do hash, quem comitou, quanto tempo atrás, mensagem: descrição do commit:
	git log --pretty='format:%C(auto)%h (%s, %ad)'

mostra log dos últimos procedimentos
muito bom. vai ser um dos mais utilizados.
	git reflog 

log legal colocar nos comandos também
	git shortlog  

log mostras o total de commits por autor
	git shortlog -sn 

log por autor
	git log --author='Mario*' 


log geral
	git log

Por período
	git log --since='jan 1 2018' --until='jan 10 2018' -- também é legal para ver log entre datas excluindo às mesmas.

log com diff
	git log -p
Verificando os 2 últimos commits:
	git log -p -2

Mostrando as estatísticas de todos os commits:
	git log --stat
Mostrando todos os commits, cada um em uma linha:
	git log --pretty=oneline

Mostrando todos os commits dos últimos 2 dias até o momento atual
	git log --since=2.days

mostra os três últimos commits que foram feitos
	git log -3 ---- 

----------------------
COMANDOS PARA GIT BRANCHS
-----------------------
Removendo um branch:
git branch -D nome-do-branch

Vendo branchs remotos:
git branch -a

git checkout -b nome-do-branch
Verificando em que branch você está

git branch
Voltando para o branch master

git checkout master
Jogando o branch criado no branch master
Entre como branch master:

git merge nome-do-branch-que-foi-criado
Grudando o branch criado no branch master sem o commit

Somente localmente – localhost, entre como branch master:
git rebase nome-do-branch-que-foi-criado


Deletando arquivos:
git rm nome-do-arquivo

Deletando todos os aquivos removidos ao mesmo tempo:
git ls-files --deleted | xargs git rm


=======================================================================================================================
Ignorando arquivos
=======================================================================================================================

Existem alguns arquivos que muito provavelmente você não vai precisar versionar, como por exemplo os arquivos de cache do SASS, arquivos de configuração e etc. Nesse caso você precisa fazer com que o controle de versão ignore estes arquivos. Para tanto, crie um arquivo chamado .gitignore. Feito isso, dentro deste arquivo, digite o nome ou o endereço das pastas que você quer ignorar. Um exemplo:

# See https://help.github.com/ignore-files/ for more about ignoring files.
#
# If you find yourself ignoring temporary files generated by your text editor
# or operating system, you probably want to add a global ignore instead:
# git config --global core.excludesfile ~/.gitignore_global

# Ignore bundler config
/.bundle

# Ignore the build directory
/build

# Ignore Sass' cache
/.sass-cache

# Ignore .DS_store file
.DS_Store
.cache
.rvmrc

vendor/*

.DS_Store

# Vim
*.swp
*.swo

Gemfile.lock
.vagrant
Vagrantfile

# rbenv
.ruby-version

# Ignore deploy related files
deploy

Gemfile.lock

O arquivo .gitignore fica na raiz do projeto.

===================================================================================
DICAS PARA TESTAR DEPOIS
- instalar git history no vscode extensão
- instalar git remote no vscode extensão
- instalar git blame no vscode extensão
- comando para colocar na lista de comandos do git mario :: git config --list ==para listar as configurações no git no terminal e mostrar tudo da conexão ... comando show
- git revert - para o master ----- para reverter commit de volta sem exclusão dos mesmos
- git reset - para os branchs ---- para reverter commit de volta com exclusão dos mesmos



=============================================================================
DEFINIDO COM AURÉLIO SOBRE COMO TRABALHAR COM GITLAB COM MAIS DE UMA PESSOA, CRIANDO BRANCHS ESPECÍFICAS COMO A DEVELOP
E COM FORK E REMOTE PARA O USUÁRIO PRINCIPAL DEPOIS DE CLONADO O REPOSITÓRIO PRINCIPAL

**somente na primeira configuração do fork apos isso esse comando nao será 			utilizado "
git remote add master2  https://git.serpro/76455424115/my_scripts_de_trabalho.git 

**INICIO DO DIA trazendo da master do projeto forkado commando diário para verificar alterações**
git fetch master2 	
git merge master2/master  

**FIM DO DIA atualiza para o meu  diretorio local com o git na web**
git push --set-upstream origin develop

**CRIANDO 3 brach para trabalho e para pull request ou merge request
    git checkout -b develop 
    alterar algo ou criar na branch work 
    git add . #adicionar pra area de stage ok
    git commit -m "message" #comitar  a mensagem  ok
	Mudar de branch para a develop
	
git merge workaurelio ou work (fundir as alteraçõpes da branch de trabalho para a branch de envio. 		obs:tem que mudar de branch para fazer isso ) 

**NA WEB GITLAB PARA MANDAR PARA O MASTER PRINCIPAL
clicar em merge request no lado esquerdo do menu
clicar em new merge request 
clicar em compare( ao qual voce quer comparar com o do dono do repositorio origniral para 		contribuir  ((na web))) 
depois em merge request 

=============================================================================

===========================PREPARADO PARA AMBIENTE MÁRIO MARCOS - GIT LAB=============================================

FEITO EM 30/01/2020
==executando a primeira vez para sincronização e não será necessário posteriormente.
git remote add docs2 https://git.serpro/estaleiro-docs/docs.git

OBS: criar duas branchs para trabalho - develop e work, as demais pessoas também vão ter que trabalhar desta maneira com esta duas branchs

==vai ser para trazer eventualmente do https://git.serpro/estaleiro-docs/docs.git
git fetch docs2 	
git merge docs2/master  

FEITO EM 30/01/2020 A PARTE ACIMA

OBS: 

**FIM DO DIA atualiza para o meu  diretorio local com o git na web**
testar depois
na branch work faça:
git add . #adicionar pra area de stage ok
git commit -m "message" #comitar  a mensagem  ok

mudar da work para develop
git checkout -b develop 
git merge work
git push --set-upstream origin develop


**NA WEB GITLAB PARA MANDAR PARA O MASTER PRINCIPAL
clicar em merge request no lado esquerdo do menu
clicar em new merge request 
clicar em compare( ao qual voce quer comparar com o do dono do repositorio origniral para contribuir  ((na web))) 
depois em merge request 


=========================================================================================



