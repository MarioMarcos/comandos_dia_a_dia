[Demanda INFOSUPEC]

1-Excluir o banco Postgres que foi criado em duplicidade;


2-Criar dois schemas no banco Postgresql  (inicialmente com 2 schemas: PHP e Pentaho); 


3-Favor criar uma instância de banco de dados PostgreSQL e executar os scripts abaixo, para criação de 3 bancos de dados na mesma, para ser utilizado como banco de metadados o Pentaho BA Server.

Projeto: Pentaho Infosupec
Ambiente: Homologação
Serviço: Pentaho BA Server
Código de Serviço: 11723
Mnemônico: infosupec
UG: SUPCD

Após término das configurações, favor enviar os nomes de usuário e bancos de dados utilizados, assim como a senha de acesso.
Configurar no pg_hba.conf da instância criada a entrada para o seguinte endereço IP:
- 10.39.64.52

Sugestão de nome de usuário: usr_infosupec_hom
Obs.: Caso ocorra a alteração do nome do usuário, favor corrigi-lo nos scripts seguintes.

Sugestões de nomes de bancos de dados:
dbhom_11723_hibernate
dbhom_11723_quartz
dbhom_11723_jackrabbit
Obs.: Caso ocorra a alteração dos nomes dos bancos de dados, favor corrigi-los nos scripts seguintes.

Segue em anexo arquivo contento o mesmo conteúdo do script citado abaixo.
Antes da execução, favor colocar a senha de usuário.

--
-- note: Antes da execução, favor colocar a senha do usuário
--

CREATE USER usr_infosupec_hom PASSWORD 'password';

--
-- note: Script criação BD hibernate (dbhom_11723_hibernate)
--

CREATE DATABASE dbhom_11723_hibernate WITH OWNER = usr_infosupec_hom ENCODING = 'UTF8' TABLESPACE = pg_default;
GRANT ALL PRIVILEGES ON DATABASE dbhom_11723_hibernate to usr_infosupec_hom;

--
-- note: Script criação BD jackrabbit (dbhom_11723_jackrabbit)
--

CREATE DATABASE dbhom_11723_jackrabbit WITH OWNER = usr_infosupec_hom ENCODING = 'UTF8' TABLESPACE = pg_default;
GRANT ALL PRIVILEGES ON DATABASE dbhom_11723_jackrabbit to usr_infosupec_hom;

--
-- note: Script criação BD e tabelas quartz (dbhom_11723_quartz)
--

CREATE DATABASE dbhom_11723_quartz WITH OWNER = usr_infosupec_hom ENCODING = 'UTF8' TABLESPACE = pg_default;
GRANT ALL ON DATABASE dbhom_11723_quartz to usr_infosupec_hom;

--Begin Connect--
\connect dbhom_11723_quartz usr_infosupec_hom

begin;

drop table if exists qrtz5_job_listeners;
drop table if exists qrtz5_trigger_listeners;
drop table if exists qrtz5_fired_triggers;
drop table if exists qrtz5_paused_trigger_grps;
drop table if exists qrtz5_scheduler_state;
drop table if exists qrtz5_locks;
drop table if exists qrtz5_simple_triggers;
drop table if exists qrtz5_cron_triggers;
drop table if exists qrtz5_blob_triggers;
drop table if exists qrtz5_triggers;
drop table if exists qrtz5_job_details;
drop table if exists qrtz5_calendars;

CREATE TABLE qrtz5_job_details
  (
    JOB_NAME  VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(250) NULL,
    JOB_CLASS_NAME   VARCHAR(250) NOT NULL, 
    IS_DURABLE BOOL NOT NULL,
    IS_VOLATILE BOOL NOT NULL,
    IS_STATEFUL BOOL NOT NULL,
    REQUESTS_RECOVERY BOOL NOT NULL,
    JOB_DATA BYTEA NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP)
);

CREATE TABLE qrtz5_job_listeners
  (
    JOB_NAME  VARCHAR(200) NOT NULL, 
    JOB_GROUP VARCHAR(200) NOT NULL,
    JOB_LISTENER VARCHAR(200) NOT NULL,
    PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),
    FOREIGN KEY (JOB_NAME,JOB_GROUP) 
	REFERENCES qrtz5_JOB_DETAILS(JOB_NAME,JOB_GROUP) 
);

CREATE TABLE qrtz5_triggers
  (
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    JOB_NAME  VARCHAR(200) NOT NULL, 
    JOB_GROUP VARCHAR(200) NOT NULL,
    IS_VOLATILE BOOL NOT NULL,
    DESCRIPTION VARCHAR(250) NULL,
    NEXT_FIRE_TIME BIGINT NULL,
    PREV_FIRE_TIME BIGINT NULL,
    PRIORITY INTEGER NULL,
    TRIGGER_STATE VARCHAR(16) NOT NULL,
    TRIGGER_TYPE VARCHAR(8) NOT NULL,
    START_TIME BIGINT NOT NULL,
    END_TIME BIGINT NULL,
    CALENDAR_NAME VARCHAR(200) NULL,
    MISFIRE_INSTR SMALLINT NULL,
    JOB_DATA BYTEA NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (JOB_NAME,JOB_GROUP) 
	REFERENCES qrtz5_JOB_DETAILS(JOB_NAME,JOB_GROUP) 
);

CREATE TABLE qrtz5_simple_triggers
  (
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    REPEAT_COUNT BIGINT NOT NULL,
    REPEAT_INTERVAL BIGINT NOT NULL,
    TIMES_TRIGGERED BIGINT NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 
	REFERENCES qrtz5_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE qrtz5_cron_triggers
  (
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    CRON_EXPRESSION VARCHAR(120) NOT NULL,
    TIME_ZONE_ID VARCHAR(80),
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 
	REFERENCES qrtz5_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE qrtz5_blob_triggers
  (
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    BLOB_DATA BYTEA NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 
        REFERENCES qrtz5_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);

CREATE TABLE qrtz5_trigger_listeners
  (
    TRIGGER_NAME  VARCHAR(200) NOT NULL, 
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    TRIGGER_LISTENER VARCHAR(200) NOT NULL,
    PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),
    FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP) 
	REFERENCES qrtz5_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
);


CREATE TABLE qrtz5_calendars
  (
    CALENDAR_NAME  VARCHAR(200) NOT NULL, 
    CALENDAR BYTEA NOT NULL,
    PRIMARY KEY (CALENDAR_NAME)
);


CREATE TABLE qrtz5_paused_trigger_grps
  (
    TRIGGER_GROUP  VARCHAR(200) NOT NULL, 
    PRIMARY KEY (TRIGGER_GROUP)
);

CREATE TABLE qrtz5_fired_triggers 
  (
    ENTRY_ID VARCHAR(95) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    IS_VOLATILE BOOL NOT NULL,
    INSTANCE_NAME VARCHAR(200) NOT NULL,
    FIRED_TIME BIGINT NOT NULL,
    PRIORITY INTEGER NOT NULL,
    STATE VARCHAR(16) NOT NULL,
    JOB_NAME VARCHAR(200) NULL,
    JOB_GROUP VARCHAR(200) NULL,
    IS_STATEFUL BOOL NULL,
    REQUESTS_RECOVERY BOOL NULL,
    PRIMARY KEY (ENTRY_ID)
);

CREATE TABLE qrtz5_scheduler_state 
  (
    INSTANCE_NAME VARCHAR(200) NOT NULL,
    LAST_CHECKIN_TIME BIGINT NOT NULL,
    CHECKIN_INTERVAL BIGINT NOT NULL,
    PRIMARY KEY (INSTANCE_NAME)
);

CREATE TABLE qrtz5_locks
  (
    LOCK_NAME  VARCHAR(40) NOT NULL, 
    PRIMARY KEY (LOCK_NAME)
);

INSERT INTO qrtz5_locks values('TRIGGER_ACCESS');
INSERT INTO qrtz5_locks values('JOB_ACCESS');
INSERT INTO qrtz5_locks values('CALENDAR_ACCESS');
INSERT INTO qrtz5_locks values('STATE_ACCESS');
INSERT INTO qrtz5_locks values('MISFIRE_ACCESS');

ALTER TABLE qrtz5_job_listeners OWNER TO usr_infosupec_hom;
ALTER TABLE qrtz5_trigger_listeners OWNER TO usr_infosupec_hom;
ALTER TABLE qrtz5_fired_triggers OWNER TO usr_infosupec_hom;
ALTER TABLE qrtz5_paused_trigger_grps OWNER TO usr_infosupec_hom;
ALTER TABLE qrtz5_scheduler_state OWNER TO usr_infosupec_hom;
ALTER TABLE qrtz5_locks OWNER TO usr_infosupec_hom;
ALTER TABLE qrtz5_simple_triggers OWNER TO usr_infosupec_hom;
ALTER TABLE qrtz5_cron_triggers OWNER TO usr_infosupec_hom;
ALTER TABLE qrtz5_blob_triggers OWNER TO usr_infosupec_hom;
ALTER TABLE qrtz5_triggers OWNER TO usr_infosupec_hom;
ALTER TABLE qrtz5_job_details OWNER TO usr_infosupec_hom;
ALTER TABLE qrtz5_calendars OWNER TO usr_infosupec_hom;

commit;
--End Connect--
